security:
  # Configuration des hashers de mot de passe
  password_hashers:
    # Spécifie que les mots de passe des utilisateurs qui implémentent PasswordAuthenticatedUserInterface seront hachés avec l'algorithme choisi ici
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
      algorithm: auto  # Symfony choisit automatiquement l'algorithme de hachage (généralement bcrypt ou argon2, dans le projet bcrypt est utilisé)
      cost: 15  # Détermine le coût de l'algorithme de hachage (complexité)

  # Configuration du fournisseur d'utilisateurs (d'où proviennent les utilisateurs pour l'authentification)
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User  # Indique que les utilisateurs viennent de l'entité User
        property: email  # Utilise l'email pour retrouver les utilisateurs dans la base de données

  # Définition des firewalls (protection des routes de l'application)
  firewalls:
    # Configuration du firewall pour les routes de développement, comme les outils de débogage et les ressources statiques (CSS, JS, etc.)
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/  # Ce motif couvre les routes liées au profiler, aux fichiers CSS, JS et images
      security: false  # Pas de sécurité appliquée sur ces routes (les utilisateurs peuvent y accéder sans être authentifiés)

    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/(api|comment/api)
      stateless: true
      provider: app_user_provider
      jwt: ~

    main:
      lazy: true
      provider: app_user_provider
      form_login:
        login_path: app_login
        check_path: app_login
        enable_csrf: true
      logout:
        path: app_logout

  # Configuration des contrôles d'accès (qui peut accéder à quelles routes en fonction de son rôle)
  access_control:
    # Autorise l'accès à la page de connexion sans être authentifié
    - { path: ^/api/login, roles: PUBLIC_ACCESS }  # La page /login est publique (tout le monde peut y accéder)

    # Autorise l'accès à la page de déconnexion sans être authentifié
    - { path: ^/logout, roles: PUBLIC_ACCESS }  # La page /logout est publique (tout le monde peut y accéder)

    - { path: ^/categorie, roles: ROLE_ADMIN }

    - { path: ^/article/, roles: PUBLIC_ACCESS }

    - { path: ^/article/new, roles: IS_AUTHENTICATED_FULLY }

    - { path: ^/comment/api, roles: IS_AUTHENTICATED_FULLY }  # Toutes les autres routes API nécessitent une authentification

    - { path: ^/admin, roles: ROLE_ADMIN }

    - { path: ^/profile, roles: ROLE_USER }

    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

monolog:
    channels: ['security']
    handlers:
        security:
            type: stream
            path: "%kernel.logs_dir%/security.log"
            level: debug
